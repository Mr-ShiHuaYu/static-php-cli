name: CI on x86_64 Windows

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: php version to compile
        default: '8.4'
        type: choice
        options:
          - '8.4'
          - '8.3'
          - '8.2'
          - '8.1'
          - '8.0'
      build-cli:
        description: build cli binary
        default: true
        type: boolean
      build-micro:
        description: build phpmicro binary
        type: boolean
      extensions:
        description: extensions to compile (comma separated)
        required: true
        type: string
      prefer-pre-built:
        description: prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      debug:
        description: enable debug logs
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: build ${{ inputs.version }} on Windows x86_64
    runs-on: windows-2022  # 使用当前支持的运行器
    
    # ✅ 关键修复：使用官方支持的 Action
    strategy:
      matrix:
        vc-path: [ "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise" ]
    
    steps:
      - uses: actions/checkout@v4

      # ✅ 修复1：使用微软官方 Action 安装 VS2019
      - name: Install VS2019 Build Tools
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: '16.0'  # VS2019
          architecture: x64

      # ✅ 修复2：手动设置 VS2019 环境变量
      - name: Set VS2019 Environment
        shell: cmd
        run: |
          call "${{ matrix.vc-path }}\VC\Auxiliary\Build\vcvars64.bat"
          echo "VC_PATH=${{ matrix.vc-path }}" >> $env:GITHUB_ENV

      # ✅ 验证编译器版本
      - name: Verify Compiler
        shell: cmd
        run: |
          cl /? | findstr "Version 19.2"
          if errorlevel 1 (echo "ERROR: VS2019 compiler not found!" && exit 1)

      # 缓存Composer依赖
      - id: cache-composer-deps
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-deps-${{ runner.os }}-${{ hashFiles('composer.lock') }}

      - if: steps.cache-composer-deps.outputs.cache-hit != 'true'
        run: composer update --no-dev --classmap-authoritative

      # 缓存键包含环境标识
      - name: Generate hashed key for download cache
        shell: bash
        run: |
          INPUT_HASH=$(echo "win2022-vs2019-${{ inputs.version }}-${{ inputs.extensions }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> "$GITHUB_ENV"

      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-${{ env.INPUT_HASH }}

      # 调试与预编译配置
      - if: inputs.debug == true
        run: echo "SPC_BUILD_DEBUG=--debug" >> $env:GITHUB_ENV
      - if: inputs.prefer-pre-built == true
        run: echo "SPC_PRE_BUILT=--prefer-pre-built" >> $env:GITHUB_ENV

      # 构建目标配置
      - if: ${{ inputs.build-cli == true }}
        run: echo "SPC_BUILD_CLI=--build-cli" >> $env:GITHUB_ENV
      - if: ${{ inputs.build-micro == true }}
        run: echo "SPC_BUILD_MICRO=--build-micro" >> $env:GITHUB_ENV

      - run: ./bin/spc doctor

      # 下载依赖
      - if: steps.cache-download.outputs.cache-hit != 'true'
        run: ./bin/spc download --with-php="${{ inputs.version }}" --for-extensions="${{ inputs.extensions }}" ${{ env.SPC_BUILD_DEBUG }} ${{ env.SPC_PRE_BUILT }}

      # 执行构建
      - run: ./bin/spc build "${{ inputs.extensions }}" ${{ env.SPC_BUILD_DEBUG }} ${{ env.SPC_BUILD_CLI }} ${{ env.SPC_BUILD_MICRO }}

      # 成品上传
      - if: ${{ inputs.build-cli == true }}
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ inputs.version }}-win2022-vs2019
          path: buildroot/bin/php.exe

      - if: ${{ inputs.build-micro == true }}
        uses: actions/upload-artifact@v4
        with:
          name: micro-${{ inputs.version }}-win2022-vs2019
          path: buildroot/bin/micro.sfx

      - uses: actions/upload-artifact@v4
        with:
          name: license-files
          path: buildroot/license/
      - uses: actions/upload-artifact@v4
        with:
          name: build-meta
          path: |
            buildroot/build-extensions.json
            buildroot/build-libraries.json
